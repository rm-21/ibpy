# generated by datamodel-codegen:
#   filename:  historical.json
#   timestamp: 2023-08-27T04:34:58+00:00
import datetime as dt

from pydantic import BaseModel, Field, field_validator


class Datum(BaseModel):
    o: float
    c: float
    h: float
    l: float
    v: int
    t: dt.datetime


class HistoricalData(BaseModel):
    server_id: str = Field(..., alias="serverId")
    symbol: str
    text: str
    price_factor: int = Field(..., alias="priceFactor")
    start_time: str = Field(..., alias="startTime")
    high: str
    low: str
    time_period: str = Field(..., alias="timePeriod")
    bar_length: int = Field(..., alias="barLength")
    md_availability: str = Field(..., alias="mdAvailability")
    mkt_data_delay: int = Field(..., alias="mktDataDelay")
    outside_rth: bool = Field(..., alias="outsideRth")
    volume_factor: int = Field(..., alias="volumeFactor")
    price_display_rule: int = Field(..., alias="priceDisplayRule")
    price_display_value: str = Field(..., alias="priceDisplayValue")
    negative_capable: bool = Field(..., alias="negativeCapable")
    message_version: int = Field(..., alias="messageVersion")
    data: list[Datum]
    points: int
    travel_time: int = Field(..., alias="travelTime")

    @field_validator("start_time")
    @classmethod
    def parse_start_time(cls, value: str) -> dt.datetime:
        return dt.datetime.strptime(value, "%Y%m%d-%H:%M:%S")


class HistoricalDataResp(BaseModel):
    symbol: str
    data: list[Datum]
